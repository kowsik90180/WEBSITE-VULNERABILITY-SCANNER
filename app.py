from flask import Flask, request, render_template
import time
from zapv2 import ZAPv2
from flask_mysqldb import MySQL

app = Flask(__name__)

# MySQL configurations
app.config['MYSQL_HOST'] = 'localhost'
app.config['MYSQL_USER'] = 'root'
app.config['MYSQL_PASSWORD'] = 'Kowsik123#'
app.config['MYSQL_DB'] = 'vulnerability_scanner'
app.config['MYSQL_CURSORCLASS'] = 'DictCursor'

mysql = MySQL(app)

# Initialize ZAP API
zap = ZAPv2(apikey='rnmi4i3ooa9me9utu3oe2lpc6n')  # Replace with your actual API key

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/scan', methods=['POST'])
def scan():
    url = request.form['url']
    try:
        zap.urlopen(url)
        time.sleep(2)

        zap.spider.scan(url)
        while int(zap.spider.status()) < 100:
            time.sleep(2)

        zap.ascan.scan(url)
        while int(zap.ascan.status()) < 100:
            time.sleep(5)

        alerts = zap.core.alerts(baseurl=url)

        if not alerts:
            return render_template('results.html', vulnerabilities=None, vulnerability_types=None)

        cursor = mysql.connection.cursor()
        vulnerability_types = set()
        for alert in alerts:
            cursor.execute("""
                INSERT INTO scan_results (url, alert, description, risk)
                VALUES (%s, %s, %s, %s)
            """, (url, alert.get('alert', 'N/A'), alert.get('description', 'N/A'), alert.get('risk', 'N/A')))
            
            # Determine the type of vulnerability
            if 'SQL Injection' in alert.get('alert', ''):
                vulnerability_types.add('SQL Injection')
            elif 'XSS' in alert.get('alert', ''):
                vulnerability_types.add('Cross-Site Scripting (XSS)')
            elif 'Malware' in alert.get('alert', ''):
                vulnerability_types.add('Malware')
            # Add more conditions as needed to cover different vulnerabilities

        mysql.connection.commit()
        cursor.close()

        vulnerabilities = [{'alert': alert.get('alert', 'N/A'), 'description': alert.get('description', 'N/A'), 'risk': alert.get('risk', 'N/A'), 'url': alert.get('url', 'N/A')} for alert in alerts]

        return render_template('results.html', vulnerabilities=vulnerabilities, vulnerability_types=vulnerability_types)

    except Exception as e:
        return f"Error occurred: {str(e)}"

if __name__ == '__main__':
    app.run(debug=True)
